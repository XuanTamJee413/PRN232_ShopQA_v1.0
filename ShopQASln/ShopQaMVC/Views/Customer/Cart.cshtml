@model List<ShopQaMVC.Models.CartVM>
@{
    ViewData["Title"] = "Cart";
}
<section class="breadcrumb-option">
    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <div class="breadcrumb__text">
                    <h4>Shopping Cart</h4>
                    <div class="breadcrumb__links">
                        <a href="/Home">Home</a>
                        <a href="/Home/Shop">Shop</a>
                        <span>Shopping Cart</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<section class="shopping-cart spad">
    <div class="container">
        <div class="row">
            <div id="cart-content" class="col-lg-8">
                @for (int i = 0; i < Model.Count; i++)
                {
                    var cart = Model[i];
                    <div class="cart-group" data-index="@i" style="display:@(i == 0 ? "block" : "none")">
                        <h4>Cart ID: @cart.Id - Created At: @cart.CreatedAt.ToString("dd/MM/yyyy")</h4>
                        <div class="shopping__cart__table mb-4">
                            <table>
                                <thead>
                                    <tr>
                                        <th>Product</th>
                                        <th>Quantity</th>
                                        <th>Total</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in cart.Items)
                                    {
                                        <tr data-item-id="@item.Id">
                                            <td class="product__cart__item">
                                                <div class="product__cart__item__pic">
                                                    <img src="@item.ProductVariant?.ImageUrl" width="90" />
                                                </div>
                                                <div class="product__cart__item__text">
                                                    <h6>@item.ProductVariant?.Product.Name</h6>
                                                    <h6>Size: @item.ProductVariant?.Size - Color: @item.ProductVariant?.Color</h6>
                                                    <h5>@($"{item.ProductVariant?.Price:N0} ₫")</h5>
                                                </div>
                                            </td>
                                            <td class="quantity__item">
                                                <div class="quantity">
                                                    <div class="pro-qty-2">
                                                        <input type="text" class="quantity-input" data-cart-item-id="@item.Id" value="@item.Quantity" />
                                                    </div>
                                                </div>
                                            </td>
                                            <td class="cart__price">@($"{item.ProductVariant?.Price * item.Quantity:N0} ₫")</td>
                                            <td class="cart__close">
                                                <i class="fa fa-close delete-cart-item" data-cart-item-id="@item.Id" style="cursor:pointer;"></i>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                }

                <div class="row">
                    <div class="col-lg-6 col-md-6 col-sm-6">
                        <div class="continue__btn">
                            <a href="/Home/Shop">Continue Shopping</a>
                        </div>
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-6">
                        <div class="continue__btn update__btn">
                            <button id="update-cart-btn" class="site-btn"><i class="fa fa-spinner"></i> Update cart</button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-lg-4">
                <div class="cart__discount">
                    <h6>Voucher Code</h6> 
                    <form action="#">
                        <input type="text" placeholder="Coupon code">
                        <button type="submit">Apply</button>
                    </form>
                </div>

                <div class="cart__discount mt-4">
                    <h6>Thông tin giao hàng</h6>
                    <form action="#">
                        <input type="tel" id="shipping-phone" placeholder="Số điện thoại" class="mb-2">
                        <textarea id="shipping-address" placeholder="Địa chỉ nhận hàng" style="width: 100%; border: 1px solid #e1e1e1; height: 80px; padding: 10px;"></textarea>
                    </form>
                </div>

                <div class="cart__discount mt-4">
                    <h6>Your Carts</h6>
                    <ul class="list-group">
                        @for (int i = 0; i < Model.Count; i++)
                        {
                            var cart = Model[i];
                            <li class="list-group-item cart-selector @(i == 0 ? "active" : "")" data-cart-id="@cart.Id">
                                Cart @cart.Id - @cart.CreatedAt.ToString("dd/MM/yyyy") (@cart.Status)
                            </li>
                        }
                    </ul>
                </div>
                <div class="cart__total">
                    <h6>Cart total</h6>
                    <ul>
                        <li>Subtotal <span id="subtotal-display">0 ₫</span></li>
                        <li>Total <span id="total-display">0 ₫</span></li>
                    </ul>
                    @* tamnx: tú nếu muốn chuyển qua proceed trước thì xem lại đoạn này nha *@
                    <a id="checkout-btn" href="#" class="primary-btn">Proceed to checkout</a>
                    <script>
                        document.getElementById("checkout-btn").addEventListener("click", async function (e) {
                            e.preventDefault();
                            const token = sessionStorage.getItem("JwtToken");

                            // Lấy cartId từ phần tử đang active
                            const activeSelector = document.querySelector(".cart-selector.active");
                            const cartId = activeSelector ? activeSelector.getAttribute("data-cart-id") : null;

                            // Lấy thông tin giao hàng
                            const phone = document.getElementById("shipping-phone").value;
                            const address = document.getElementById("shipping-address").value;

                            if (!cartId) {
                                alert("Không tìm thấy giỏ hàng.");
                                return;
                            }

                            // Kiểm tra thông tin giao hàng
                            if (!phone || !address) {
                                alert("Vui lòng điền đầy đủ số điện thoại và địa chỉ nhận hàng.");
                                return;
                            }

                            try {
                                const res = await fetch(`https://localhost:7101/api/Order/checkout?cartId=${cartId}`, {
                                    method: "POST",
                                    headers: {
                                        "Content-Type": "application/json",
                                        "Authorization": `Bearer ${token}`
                                    },
                                    // Gửi thông tin giao hàng trong body của request
                                    body: JSON.stringify({
                                        phone: phone,
                                        address: address
                                    })
                                });

                                if (!res.ok) {
                                    const error = await res.text();
                                    alert("Lỗi: " + error);
                                    return;
                                }

                                const data = await res.json();
                                alert("Đặt hàng thành công! Mã đơn: " + data.id);
                                location.reload();
                            } catch (err) {
                                console.error(err);
                                alert("Có lỗi xảy ra khi đặt hàng.");
                            }
                        });
                    </script>
                    @* end đoạn cần xem lại *@
                </div>
            </div>
        </div>
    </div>

    @section Scripts {
        <script>
            document.addEventListener("DOMContentLoaded", function () {
                const cartGroups = document.querySelectorAll(".cart-group");
                const cartSelectors = document.querySelectorAll(".cart-selector");

                const subtotalDisplay = document.getElementById("subtotal-display");
                const totalDisplay = document.getElementById("total-display");

                function formatCurrencyVND(amount) {
                    return new Intl.NumberFormat('vi-VN', {
                        style: 'currency',
                        currency: 'VND'
                    }).format(amount);
                }

                function updateTotal(index) {
                    const cartGroup = cartGroups[index];
                    if (!cartGroup) return;

                    let total = 0;
                    const rows = cartGroup.querySelectorAll("tbody tr");

                    rows.forEach(row => {
                        const totalText = row.querySelector(".cart__price")?.innerText.replace(/[^\d]/g, "");
                        if (totalText) total += parseInt(totalText);
                    });

                    subtotalDisplay.innerText = formatCurrencyVND(total);
                    totalDisplay.innerText = formatCurrencyVND(total);
                }

                updateTotal(0);

                cartSelectors.forEach((selector, index) => {
                    selector.addEventListener("click", function () {
                        cartSelectors.forEach(s => s.classList.remove("active"));
                        selector.classList.add("active");

                        cartGroups.forEach((group, i) => {
                            group.style.display = i === index ? "block" : "none";
                        });

                        const checkoutBtn = document.getElementById("checkout-btn");
                        const cartId = selector.getAttribute("data-cart-id");
                        const userId = "@Model.FirstOrDefault()?.UserId";
                        if (checkoutBtn) {
                            checkoutBtn.href = `/Customer/Checkout?cartId=${cartId}&userId=${userId}`;
                        }

                        updateTotal(index);
                    });
                });

                // Update cart
                document.getElementById("update-cart-btn").addEventListener("click", async function () {
                    const token = sessionStorage.getItem("JwtToken");
                    if (!token) {
                        alert("Vui lòng đăng nhập lại.");
                        return;
                    }

                    const inputs = document.querySelectorAll(".quantity-input");
                    for (const input of inputs) {
                        const id = input.dataset.cartItemId;
                        const quantity = parseInt(input.value);
                        if (isNaN(quantity) || quantity <= 0) continue;

                        await fetch(`https://localhost:7101/odata/CartItems(${id})`, {
                            method: "PATCH",
                            headers: {
                                "Authorization": `Bearer ${token}`,
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify({ Quantity: quantity })
                        });
                    }

                    alert("Đã cập nhật giỏ hàng");
                    location.reload();
                });

                // Delete item
                document.querySelectorAll(".delete-cart-item").forEach(btn => {
                    btn.addEventListener("click", async function () {
                        if (!confirm("Bạn có chắc muốn xóa sản phẩm này?")) return;

                        const id = this.dataset.cartItemId;
                        const token = sessionStorage.getItem("JwtToken");

                        const res = await fetch(`https://localhost:7101/odata/CartItems(${id})`, {
                            method: "DELETE",
                            headers: { "Authorization": `Bearer ${token}` }
                        });

                        if (res.ok) {
                            alert("Đã xoá sản phẩm");
                            location.reload();
                        } else {
                            alert("Xoá thất bại");
                        }
                    });
                });
            });
        </script>
    }
</section>
