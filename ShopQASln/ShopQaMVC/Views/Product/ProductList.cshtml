@page
@model ShopQaMVC.Views.Product.ProductListModel
<input type="hidden" id="jwtToken" value="@ViewBag.Token" />

<div class="container mt-5">
    <h2 class="mb-4 text-center">Product List</h2>

    <div class="mb-3">
        <a href="/Product/Create" class="btn btn-success">Create New Product</a>
    </div>

    <!-- Filter Form -->
    <form id="searchForm" method="get" class="mb-4">
        <div class="row">
            <div class="col-md-3 mb-3">
                <label for="name" class="form-label">Product Name</label>
                <input type="text" class="form-control" id="name" name="name" placeholder="Search by name" />
            </div>
            <div class="col-md-3 mb-3">
                <label for="category" class="form-label">Category</label>
                <select id="category" name="categoryId" class="form-control">
                    <option value="">-- Select Category --</option>
                </select>
            </div>
            <div class="col-md-2 mb-3 d-flex align-items-end">
                <button type="submit" class="btn btn-primary w-100">Search</button>
            </div>
        </div>
    </form>

    <!-- Product Table -->
    <div class="table-responsive" id="productTable">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Category</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

    <!-- Pagination -->
    <nav>
        <ul class="pagination justify-content-center" id="pagination"></ul>
    </nav>

    <!-- Update Product Modal -->
    <div class="modal fade" id="updateProductModal" tabindex="-1" aria-labelledby="updateProductModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <form id="updateProductForm">
                    <div class="modal-header">
                        <h5 class="modal-title" id="updateProductModalLabel">Update Product</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <input type="hidden" id="updateProductId" />
                        <div class="mb-3">
                            <label for="updateName" class="form-label">Product Name</label>
                            <input type="text" class="form-control" id="updateName" required />
                        </div>
                        <div class="mb-3">
                            <label for="updateDescription" class="form-label">Description</label>
                            <textarea class="form-control" id="updateDescription" rows="3" required></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="updateCategory" class="form-label">Category</label>
                            <select class="form-control" id="updateCategory" required></select>
                        </div>
                        <div class="mb-3">
                            <label for="updateBrand" class="form-label">Brand</label>
                            <select class="form-control" id="updateBrand" required></select>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Save changes</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        $(document).ready(function () {
            const pageSize = 5;
            let currentPage = 1;
            const token = $('#jwtToken').val();
            // Render pagination
            function renderPagination(totalPages) {
                const pagination = $('#pagination');
                pagination.empty();

                for (let i = 1; i <= totalPages; i++) {
                    const li = $('<li>').addClass('page-item').toggleClass('active', i === currentPage);
                    const a = $('<a>').addClass('page-link').attr('href', '#').text(i).click(function (e) {
                        e.preventDefault();
                        currentPage = i;
                        fetchProducts();
                    });
                    li.append(a);
                    pagination.append(li);
                }
            }

            // Fetch products with filter
            function fetchProducts() {
                const name = $('#name').val();
                const categoryId = $('#category').val();

                $.ajax({
                    url: 'https://localhost:7101/api/Product',
                    type: 'GET',
                         headers: {
            'Authorization': 'Bearer ' + token
        },
                    data: { name: name, categoryId: categoryId },
                    success: function (data) {
                        const tableBody = $('#productTable tbody');
                        tableBody.empty();

                        const start = (currentPage - 1) * pageSize;
                        const pagedData = data.slice(start, start + pageSize);

                        if (pagedData.length === 0) {
                            tableBody.append('<tr><td colspan="4">No products found</td></tr>');
                        } else {
                            $.each(pagedData, function (index, product) {
                                const row = '<tr>' +
                                   '<td><a href="/Product/Detail/' + product.id + '" class="product-detail-link">' + product.name + '</a></td>' +
                                    '<td>' + product.description + '</td>' +
                                    '<td>' + product.categoryName + '</td>' +
                                    '<td>' +
                                    '<button class="btn btn-warning btn-sm update-btn" data-id="' + product.id + '">Update</button> ' +
                                    '<button class="btn btn-danger btn-sm delete-btn" data-id="' + product.id + '">Delete</button>' +
                                    '</td>' +
                                    '</tr>';
                                tableBody.append(row);
                            });
                        }

                        const totalPages = Math.ceil(data.length / pageSize);
                        renderPagination(totalPages);
                    },
                    error: function (xhr, status, error) {
                        console.error('Error fetching products: ' + error);
                    }
                });
            }

            // Load categories for filter dropdown
               function loadCategories() {
            $.getJSON('https://localhost:7101/odata/Category', function (data) {
                const categories = data.value; // Lấy danh sách categories từ 'value'

                const categorySelect = $('#category');
                categorySelect.empty().append('<option value="">-- Chọn danh mục --</option>');

                categories.forEach(c => {
                    categorySelect.append(`<option value="${c.Id}">${c.Name}</option>`); // Sửa thành c.Id và c.Name
                });

                categorySelect.show();
            });
        }


            // Initialize categories dropdown
            loadCategories();

            // Handle search form submission
            $('#searchForm').submit(function (e) {
                e.preventDefault();
                currentPage = 1;
                fetchProducts();
            });

            // Handle product update
            $('#productTable').on('click', '.update-btn', function (e) {
                e.preventDefault();
                const productId = $(this).data('id');

                $.ajax({
                    url: 'https://localhost:7101/api/Product/' + productId,
                    type: 'GET',
                                      headers: {
            'Authorization': 'Bearer ' + token
        },
                    success: function (product) {
                        $('#updateProductId').val(product.id);
                        $('#updateName').val(product.name);
                        $('#updateDescription').val(product.description);

                        // Load categories for update form
                              // Load categories for update form
        $.getJSON('https://localhost:7101/odata/Category', function (data) {
            const categories = data.value;
            const categorySelect = $('#updateCategory');
            categorySelect.empty();
            categories.forEach(c => {
                const selected = c.Id === product.CategoryId ? 'selected' : '';
                categorySelect.append(`<option value="${c.Id}" ${selected}>${c.Name}</option>`);
            });
            categorySelect.show();
        });

        // Load brands for update form
        $.getJSON('https://localhost:7101/odata/Brand', function (data) {
            const brands = data.value;
            const brandSelect = $('#updateBrand');
            brandSelect.empty();
            brands.forEach(b => {
                const selected = b.Id === product.BrandId ? 'selected' : '';
                brandSelect.append(`<option value="${b.Id}" ${selected}>${b.Name}</option>`);
            });
            brandSelect.show();
        });


                        $('#updateProductModal').modal('show');
                    },
                    error: function (xhr, status, error) {
                        alert('Error fetching product: ' + error);
                    }
                });
            });

            // Handle product update form submission
            $('#updateProductForm').submit(function (e) {
                e.preventDefault();
                const id = $('#updateProductId').val();
                const name = $('#updateName').val().trim();
                const description = $('#updateDescription').val().trim();
                const categoryId = parseInt($('#updateCategory').val());
                const brandId = parseInt($('#updateBrand').val());

                if (!name || !description || !categoryId || !brandId) {
                    alert("Please fill out all fields.");
                    return;
                }

                const data = {
                    id: id,
                    name: name,
                    description: description,
                    categoryId: categoryId,
                    brandId: brandId
                };

                $.ajax({
                    url: 'https://localhost:7101/api/Product/' + id,
                    type: 'PUT',
                                      headers: {
            'Authorization': 'Bearer ' + token
        },
                    contentType: 'application/json',
                    data: JSON.stringify(data),
                    success: function () {
                        alert('✅ Product updated successfully!');
                        $('#updateProductModal').modal('hide');
                        fetchProducts();
                    },
                    error: function (xhr) {
                        alert('❌ Error updating product: ' + xhr.responseText);
                    }
                });
            });

            // Handle product delete
            $('#productTable').on('click', '.delete-btn', function (e) {
                e.preventDefault();
                const productId = $(this).data('id');
                if (confirm('Are you sure you want to delete this product?')) {
                    $.ajax({
                        url: 'https://localhost:7101/api/Product/' + productId,
                        type: 'DELETE',
                                          headers: {
            'Authorization': 'Bearer ' + token
        },
                        success: function () {
                            alert('Product deleted successfully!');
                            fetchProducts();
                        },
                        error: function (xhr, status, error) {
                            alert('Error deleting product: ' + error);
                        }
                    });
                }
            });

            fetchProducts();
        });
    </script>
}
